5.类和对象
    对于类和对象的通俗理解就是：类用于描述客观世界里某一类对象的共同特征。而对象是类的具体的存在
    java也支持面向对象的三大特征：封装、多态、继承。
    构造器用于对类实例进行初始化操作，构造器支持重载，如果多个重载的构造器包含了相同的初始化代码，则可以把这些初始化的代码方式在普通初始化块中，
        初始化块总在构造器执行之前被调用。
    5.1 类和对象
        5.1.1 定义类
                1）类名：必须是有一个或多个有意义的单词连缀起来，中间不容许有分隔符，每个单词首字母大写，其他字母全部小写。
                   类修饰符有public ,final,abstract
                类包含三个：构造器，成员变量和方法。
                ****但是重点的是static修饰的成员不能访问没有static的成员。
                    成员变量：用于定义该类或该类的实例所包含的状态数据，
                    方法：用于定义该类和该类的实例的行为特征或者功能实现。
                    构造器：是一个类创建对象的根本途径，没有构造器，就无法实例类，，若没有自己创建构造器，，java会默认创建一个构造器的
                2）成员变量名：应该由一个或多个有意义的单词连缀而成，第一个单词首字母小写，后面每个单词首字母大写
                   修饰符有：public,protected,private,static,final
                3）方法名：的命令规则与成员变量的规则基本相同，但是通常建议方法名，以英文动词开头。
                **static 是一个特殊的关键字，它可用于修饰方法，成员变量等成员。使用这个关键词，表示这个属于类本身，而不是属于该类的单个实例
                    通常使用static也可以称为实例变量，实例方法，，，也可以称静态
                    && 静态成员 不能直接访问非静态成员
                4）构造器，是一个特殊的方法，构造器不能定义返回值类型，也不能使用void声明构造器，（不是不能声明，如果添加，这个方法会变成普通方法）
                    构造器 不是没有返回值，是返回值是类的实例，是隐式的。
        5.1.4 对象的this 引用
                this关键字总是指向调用方法的对象，
                对于this出现的位置有两种情况：
                        1）构造器中引用该构造器正在初始化的对象
                        2）在方法中引用调用方法的对象
                    this最大的作用就是让类中一个方法，访问该类里的另一个方法或实例变量。
                    this可以代表任何对象，但是它在方法体内，最大的作用就是代替该类的实例，进行引用。
                    而且java容许对象的一个成员调用另一个成员，可以省略this前缀。，（但是static修饰的方法不能使用this引用）
    5.2 方法详解
        在类中，方法只用存在两种区别是static定义的。一种是类本身的方法，一种是类的实例的方法。
        java里面的参数调用方式只有一种是:值传递（就是通过复制品传递，而本身则不会受影响）
        但是，在值传递可以分为基本类型和引用类型，，，但是引用类型，，是传递的本身
        5.2.3 形参个数可变的方法
            java容许存在形参个数可变的参数。就是在最后一个形参的类型后增加三点… 则表明该形参可以接受多个参数值。，，会被当做数组传入。
        5.2.4 递归方法
            这是java的一种内式循环
            可以通过代码了解   例如f(n+2) = 2*f(n+1) + f(n)
            最重要的一点是递归一定要向已知的方法进行递归
        5.2.5 方法重载
            java容许同一个类里定义多个同名方法，只要形参列表不同就行，，就称为方法重载
            方法重载的要求是：同一个类方法名相同，参数列表不同。
            重载包含参数个数可变性，，但是一般不要如此，，没有太大的是在意义，，还给你找麻烦。
    5.3 成员变量和局部变量
        5.3.1 什么是成员变量，局部变量
            局部变量被分为类变量和实例变量，static定义的是类变量。
            这两个的存在范围，差不多，但是根本上的差别却不一样。
            对于类的初始化，，就跟数组初始化初始化一样，不用显示初始化，就会自动填充默认值。除非程序员自己改动。
            通过代码得知，实例变量随实例的存在而存在，，而类变量随类存在而存在。
            ***换句话说就是：同一个类的所有变量访问的类变量时，，其实都是访问同一个类变量，，就是访问同一片内存区

            局部变量：分为形参，方法局部变量，代码块局部变量，，，而局部变量就是除形参，都必须显式初始化。
            java容许成员变量和局部变量可以相同，但是其他不能，但是尽量不要相同，影响程序的可读性。
        5.3.2 成员变量的初始化和内存中的运行机制
            类变量的内存空间 在类的初始化的时候，就给出了内存空间，，
            实例变量的内存空间，在类的实例的时候，才给出的空间。

            成员变量都是存储在堆内存中
            建议:在当程序访问类变量时，尽量使用类为基调，，这样可以避免程序产生歧义。
        5.3.3 局部变量的初始化和内存中的运行机制
            成员变量只有在程序要自己的时候，才进行分配内存，，，，内存在栈内存中。
        5.3.4 变量的使用规则
            局部变量的范围越小，对于程序的效果就会越好
            这有几种情况 是要使用成员变量的
                1）若果定义的变量是用于描述某个类或某个对象的固有信息的，如果这个信息对这个类的所有的实例完全相同的---就是类相关，
                2）如果在某个类中需要以一个变量来保存该类或者实例运行时的状态信息，
                3）某个信息需要在某个类的多个方法之间进行共享
    5.4 隐藏和封装
        5.4.1 理解封装
            封装：它指的是对象的状态信息是隐藏在对象内部，不容许外部程序直接访问对象内部信息，而是通过给定的方法来实现对内部信息的操作
            封装的含义：把该隐藏的隐藏，该暴露的暴露
        5.4.2 使用访问控制符
            private（类访问权限），default（包访问权限），protected（子类访问权限），public（公共访问权限）  这四个，是访问控制级别
            如果文件没有任何是public修饰的类，则类的名只需要符合命名规则
                ***关于访问控制符的的使用，有几条的基本规则{
                        1）类里的绝大部分成员变量都应该使用private修饰，工具方法也用private修饰
                        2）如果某个类主要用于做其他类的父类，大部分的方法有可能被子类重写，则用protected
                        3）希望暴露用public
                }
                ****对于一些专有名词的一些解释{
                        高内聚：尽可能把模块的内部数据、功能实现细节隐藏在模块内部独立完成，不容许外部直接干预
                        低耦合：仅暴露少量的方法给外部使用
                }
        5.4.3 package，import，import static
                    这个节，，不细节解释
    5.5 深入构造器
        构造器是一个特殊方法，用于创建实例时执行初始化，（即使使用工厂模式和反射等方式，实质都是依赖于构造器）
        java必须包含一个或一个以上的构造器
        5.5.1 使用构造器执行初始化
            原理看代码，
            因为构造器只要用于被其他方法调用，，因而通常把构造器设置成public访问权限，
        5.5.2 构造器重载
            同一个类可以用多个构造器，而构造器的区别就是参数不一样，而形成了重载。 重载更方便来初始化java对象
            在这块重点说明this的用法，还有在软甲规则中，相同的代码，不要写两次以上。
    5.6 类的继承
        5.6.1 继承的特点
            继承通过extends 关键字来实现继承，继承只有一个直接父类，可以有多个间接的父类
            子类扩展了父类，将可以获得父类的全部成员变量和方法（但是，构造器不可以获得，但是可以调用）
            java类默认扩展java.lang.Object类，这个类所有的父类，可以是直接父类，也可以是间接父类。
        5.6.2 重写父类的方法
            如果子类有一个直接的父类，就可以继承父类的方法，当然想要重写也可以重写，，（但是抽象父类，的方法，就必须要重写，或者子类也是抽象就不用）
            遵循的规则：方法名相同、形参列表形同。子类方法返回值，子类方法声明抛出的异常都比父类小或相等。子类方法的访问权限比父类的大

            **如果想要在子类调用父类被覆盖的方法，使用super（实例方法）或者父类类名（类方法）来调用
            当然如果存在private的方法，是不存在重写，没有任何情况有重写的情况发生

        5.6.3 super限定
            如果需要子类方法中调用父类被覆盖的实例方法，则可以使用super限定来调用父类被覆盖的实例方法。
            ********切记的是实例方法或变量********
            如果出现子类和父类同名的变量，必须要将变量进行强制想上转换，才可以调用父类的变量。  不同名，可以直接调用。
        5.6.4 调用父类构造器
            子类不会获得父类的构造器，但是可以调用父类构造器的初始化的代码。使用super
            ****super和this的不可以同时出现，，因为他们都必须要出现在方法中的第一行。
            还有一个误区的是——————当你子类没有调用父类的构造器，但是程序执行子类构造器之前，都在之前调用父类无参数的构造器。
                往上推，，最先开始的类就是java.lang.Object 类
    5.7 多态
        这是面向对象学习的最后一个特征 : 多态；
        java引用变量有两个类型：一个是编译时类型  一个是运行时类型。如果这两个不是同一个类型，就会出现多态
        5.7.1 多态性
            看代码，，好了解
        5.7.2 引用变量的强制类型转换
            如果需要让这个引用变量调用它运行时类型的方法，就必须把它强制类型转换成运行时类型，就借助于类型转换符 (type)variable
            但是类型转换符，有下面几个注意事项：
                1）基本类型之间转换只能在数值类型转换
                2）引用类型转换只能在具有继承关系的两个类型之间进行。
        5.7.3 instanceof 运算符
            它用于判断前面的对象是否是后面的类，或者其子类、实现类的实例。
            前一个操作数是一个引用类型变量，后一个操作数通常是一个类（也可以是接口）
            需要注意的是引用类型变量的编译类型 要么与后面的类相同，要么与后面的类具有父子继承关系，否则会造成编译错误。

    5.8 继承与组合
        继承是实现类复用的重要手段，但是也造成大量的高耦合的情况，，然后造成封装
        而采用组合则能更好的实现类复用则能提供更好的封装性。

        5.8.1 使用继承的注意点
            通俗来讲，子类如果继承父类，子类就会得到父类的信息和方法，会造成高耦合。
            所以设计父类有这以下的规则：{
                1）尽量隐藏父类的内部数据。就是把父类的所有成员变量设计成private访问类型
                2）不要让子类可以随意访问、修改类的方法。 如果有必须的，让其他类调用，可以使用final 不让重写该方法
                3）尽量不要在父类构造器中调用将要被子类重写的方法。
            }
            如果是必要要派生类，需要前提：{
                1）子类需要额外增加属性，而不仅仅是属性值的改变。就是teacher的teaching或者student的grade
                2）子类需要增加自己独有的行为方式（包括增加新的方法或重写父类的方法）。
            }
        5.8.2 利用组合实现复用
            如果利用一个类，除了把这类当做父类，也可以是把该类当成另一个类的组合成分。

            继承和组合的区别{
                继承 ： 子类可以直接获得父类的public的方法
                组合 ： 是把旧类对象作为新类的成员变量组合起来，用以实现新类的功能，但是要用private修饰组合的旧类对象。
            }

            通过代码可以看出，继承和组合都是实现复用，可是在什么时候的使用这两个，{
                1）将一个较为抽象的类改造成能使用于某些特定需求的类。 继承更有实际意义
                2）如果两个类之间有明确的整体、部分的关系。 组合更加适合
            }
            继承要表达的是一种[是(is-a)] 的关系，而组合是表达是 [有(has-a)]  的关系
    5.9 初始块
        与构造器的作用是一样的，但是会比构造器先运行
        5.9.1 使用初始化块
            初始化的修饰符只能是defaut和static，，，static表示静态初始化块
            初始化顺序{
                先执行初始化块或声明实例变量时指定的初始值，再执行构造器里指定的初始值

            }
        5.9.2 初始化块和构造器
            初始化是一段固定执行的代码，它不能接受任何参数。
            初始化模块就是把好多构造器中共有的提出来，单独列出。


