第十章——异常处理
    异常机制可以让程序中的代码分离，保证程序的更加优雅。并可以提高程序的健壮性
    java的异常机制依赖于try catch finally throw 和 throws 五个关键字
    java将异常分为两种：一个Checked异常，一个是Runtime异常
    但是checked异常是可以在编译阶段被处理的异常

    10.2 异常处理机制
        try-catch 就像是将大量的if语句，只要是判断的就都放在if语句里， 然后再catch写出结果，
        就像是，不管输入什么密码只要密码输入的不正确，那就是错误的。

        10.2.2 异常类的继承体系
             在catch里面都有一个Exception e  意味着catch块都是专门用于处理该异常类和子类的异常实例
             一个if可以有多个catch，但是只有一个catch才会得到处理，

            在最后一个catch里面可以的话要写Exception 这个是万能，可以保证程序的运行

        10.2.3 java7 新增的多异常捕获
             可以一个catch里面有多个捕获，多种捕获需要用| 来分割开，
             但是在多异常的时，异常变量有隐式的final修饰，因此不能对重新赋值，只有捕获一种类型的赋值，才可以赋值

        10.2.4 访问异常信息
            所有的异常对象，都包括下面几个常用的方法：{
                getMessage   返回该异常的详细描述字符串
                printStackTrace 将该异常的跟踪栈信息输出到标准错误输出
                printStactTrace(PrintStream s) 将异常的跟踪栈信息输出到指定的输出流
                getStackTrace()  返回该异常的跟踪栈信息

            }


        10.2.5 使用finally 回收资源
            java的垃圾回收机制只能回收堆内存中对象所占用的内存，不能回收任何物理资源

            如果在try catch里面有finally，则始终都会进行运行finally，除非是System.exit 退出虚拟机，不然那，不会return不会终止运行

        10.2.6 异常处理的嵌套
            在try-catch-finally里面，任何一个都可以进行嵌套，但是一般还是在嵌套两个就行，不然会降低性能，

        10.2.7 java9 增强的自动关闭资源的try语句
            try语句在后面的可以加圆括号，里面可以声明，初始化，一个或多个资源，就是那种程序结束，必须要显示关闭的资源，但是，这些资源类，要保证必须实现AutoCloseable或Closeable 接口，实现这两个接口就实现clone方法

            在try后但是在java9 可以不像前面代码中那样java9 不要求try后括号里面声明并创建资源，只需要自动关闭的资源有final修饰或者就是有效的final。java9 容许将资源变量放的圆括号 内


    10.3 Checked 异常和Runtime异常
        java的异常分为两大类：Checked异常和Runtime异常，  所有语言中，只用java语言会提供Checked异常，
            java的设计哲学----没有完善错误处理的代码根本不会被执行，

        对于处理Checked异常有两规划总；{
            当前方法明确知道如何处理该异常，程序应该使用try-catch 块来捕获异常
            当前方法不知道如何处理这种异常，应该在定义该方法时声明抛出异常。

        }
        10.3.1 使用throws声明抛出异常
            当前方法不知道如何吃力这种类型的异常，该异常应该由上一级调用者处理，
            而JVM 对异常的处理方法是：打印异常的跟踪栈信息，并终止程序运行，这就是前面程序在遇到异常后自动结束的原因

        10.3.2 方法重写时声明抛出异常的限制
            使用throws 声明抛出异常有一个限制；就是方法重写，子类方法声明抛出的异常类型，应该是父类方法声明抛出的异常类型的子类或相同，子类方法声明抛出的异常不容许逼父类方法声明抛出的异常多

            上面的限制，有着很大的不方便，所以大部分的时候，都是使用Runtime 异常，而不是用Checked异常
    10.4 使用throw 抛出异常
        10.4.1 抛出异常
            throw 抛出的异常是实例，而且每次只能抛出一个异常实例，
        10.4.2 自定义异常

            用户自定义异常都应该继承Exception的类，如果是想定义Runtime的异常可以继承RuntimeException 基类，  定义异常类通常使用两个构造器，一个是无参数构造器，一个是带一个字符串参数的构造器，

        10.4.3 catch 和throw 同时使用
            这两个使用可以实现多个方法协作处理同一个异常的情况，
        10.4.4 java7 增强的throw语句
            java7比java6 在分类异常的情况更加 的细致，如果在catch的得到准确的信息，就让main上应该描写正确的错误异常而不是Exception 全部概括

        10.4.5 异常链
            就是mvc分层的情况下，让用户不能看到底层sql的错误信息，而是经过修改的信息，是让用户能看到的信息，就是加工的信息，而不是暴露底层
    10.6 异常处理规则

        10.6.1 不要过度使用异常
            如果可以已知的避免的错误，就尽量不要使用异常，这会影响程序性能，
        10.6.2 不要把所有的条件都放在一个try语句里面


        10.6.4 不要忽略捕获到的异常
            虽然有些异常不重要，但是有些异常是很重要的，尽量可以认真的去看异常
