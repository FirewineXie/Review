4.1顺序结构
    不在这多赘述
4.4 控制循环结构
    4.4.1 使用break 结束循环
        break 是用于完全结束一个循环，跳出循环体
        break也算可以跳出所在的循环，也可以跳出外层循环  ； 格式是 break 标签 ： 的标识符
    4.4.2 使用continue 忽略本次循环的剩下的语句
        跟break 的功能有点类似，但是，continue不会终止循环体，
        与break相似的是，也有跳出所在的循环，；格式是continu 标签 ： 的标识符（前提是标签是在循环体外面）
    4.4.3 return 结束方法
        return的功能是结束一个方法，他的后面可以跟变量、常量和表达式
        与前面两个不相同的是，return 是直接结束整个方法，不会因为在多少层循环中。
4.5 数组类型---常见的数据结构
    4.5.1 数组也是一种类型
        数组要求所有的数组元素具有相同的数据类型，（但是java是面向对象的，可以通过继承，，来实现多种数据存储在数组中）
        数组也是一种数据类型，它本身就是一个引用类型，
    4.5.2 数组的定义
        数组的定义有两种方法，但是第二种因为影响程序的可读性，故不考究
        type[] arrayname;
        ***定义数组的时候，不能指定数组的长度。
    4.5.3 数组的初始化
        数组的初始化必须进行赋值，{静态初始化（有程序员指定每个数组元素的值，由系统决定长度），动态初始化（程序员指定长度，系统填充）}
        1.静态初始化  格式  arrayname = new type[] {elements ,,,};
                      简化  type[] arrayname = {elements,,,,,};
        2.动态初始化  格式   arrayname = new type[lengths];
                      简化  type[] arrayname = new type[lengths];
        两个不能同时使用
        ##记住一个异常：java.lang.ArrayIndexOutOfBoundsException;N (数组索引越界异常)
        所以数组都提供了length属性，可以查看数组的长度
    4.5.5 foreach 循环
        foreach可以循环数组和集合，而且不需要知道长度，和索引，，会自动遍历数组和集合的所有元素
        格式： for(type variableName : array | collection){}
        **使用foreach循环迭代数组元素时，并不能改变数组元素的值
    4.6 深入数组
        4.6.1 内存中的数组
            数组是一种引用数据类型，数组引用变量只是一个引用
              引用变量是访问真是对象的根本方式，也就是说：如果希望在程序中访问数组对象的本身，则只能通过这个数组的引用变量来访问他
              **{局部变量 -- 在栈中     ；   数组对象 ----在堆中} 所以要是访问堆内存中的数组元素，只能通过p[index] 的形式实现，
              也就是说 ： 数组引用变量是访问堆内存中数组元素的根本方式。
              ****只要类型相互兼容，就可以让一个数组变量指向另一个实际的数组。*****这句话运算得到虽然长度发生变化，但是根本上没有发生任何变化
              通过上面的学习，，，得到的就是----数组在表面看是一部分，但是在运行机制下， 就是两部分：一是引用变量 二是数组对象
        4.6.2 基本类型数组
              这个不用再次赘述
        4.6.3 引用类型数组
              引用类型数组就是数组元素存储的还是引用，它指向另一块内存，内存里才存放了数据。
        4.6.4 深入了解多维数组-------就是没有多维数组
              java语言格式是: type[][] arrayname ;
              初始化 : arrayname = new type[length][];
              java 语言采用上面定义的多维数组，其实就是一维数组，只是其数组元素也是引用，数组元素保存的引用指向一维数组。
              ***java是强类型语言，故不像JavaScript的一样可以随便改变类型，就可以将一维数组扩张成多维。
              初始化数组格式  ：  type[][] arrayname = new int[3][4]
        4.6.5 java8 增强工具类------Arrays--------可以直接操作数组
              （static 修饰的方法可以直接通过类名调用）
               在这不做过多说明，可以看api文档或者看想关代码，，记得这个方法可以以字符串的形式遍历数组
               java8 还为Arrays 新增了 的方法
        4.6.6  练习    1.就是可以将浮点数转化为人民币读法字符串
                        2. 通过利用二维数组下五子棋


