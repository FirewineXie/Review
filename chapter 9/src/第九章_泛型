第九章——泛型

    9.1 泛型入门
        为什么要加入泛型：因为集合不会管你存进来的元素是什么，只要进来就是object对象，如果不能自动转换，就会报错。
        泛型：就是在集合接口，类后增加尖括号里放一个数据类型，即表明这个集合是保存的是什么类型的元素

        在java8之前，都是必须要在尖括号里面加入元素类型，但是在java9中，就不用了，java就会推导 括号里的是什么元素的类型。


        在java9  的菱形语法中，他甚至容许创建匿名内部类时使用菱形语法，java可以根据上下文来推断匿名内部类的中泛型的类型。。

    9.2 深入泛型
        泛型就是；在定义类，接口方法使用类型形参，就是泛型

        容许在定义接口、类时，声明泛型形参，泛型形参在整个接口、类体内可当成类型使用，几乎所有可使用普通类型的地方都可以使用这种泛型形参。


        9.2.1 定义泛型接口，类
        9.2.2 从泛型类派生子类
            public class A extends Apple<T>{}

            如果没有传入实际的的类型，java编译器会警告，可以通过javac命令增加-Xlint；unchecked 选项来实现，
        9.2.3 并不存在泛型类
            不管泛型传入的什么形参，但是对于java来说，都是用的同样的类去处理的。，，还有一点就是在instanceof后面不能使用泛型来
    9.3 类型通配符
        如果你不能确定你的传入参数是什么，你就可以使用Object来当做类型，
        但是当你实际传入的是String类型的就会导致编译错误。

        9.3.1 使用类型通配符
            类型通配符就是一个？  这个元素类型可以匹配任何类型，

        9.3.2 设定类型通配符的上限
            List <? extends Shape>

            这种通配符的上限集合，只能从集合中取元素，但是不能向集合中添加元素（因为编译器无法确定集合元素实际是那种类型）

        9.3.3 设定类型通配符的下限

            <? super 类型>

            下限就是支持类型的型变；

        9.3.4 设定泛型形参的上限
            public class Apple<T extends Number & java.io.Serializable>{

            }
            如果需要制定类上限，则类上限必须位于第一位

    9.4 泛型方法
        9.4.1 定义泛型方法
            泛型方法：就是在声明方法时定义一个或多个泛型形参，
                修饰符<T,S> 返回值类型，方法名（形参列表）
        9.4.2 泛型方法和类型通配符的区别
            泛型方法容许泛型形参被用来表示方法的一个或多个参数之间的类型依赖关系，或者方法返回值与参数之间，的类型的依赖关系，如果没有这样关系，就不应该使用泛型方法

        9.4.3 java7 的菱形 语法与泛型构造器
            java容许在构造器签名中声明泛型形参，这就是产生了泛型构造器

        9.4.5 java8 改进的类型判断
            两个方面：{
                可通过调用方法的上面文，来推断泛型的目标类型，
                可在方法调用链中，将推断得到的泛型传递到最后一个方法
            }
    9.5 擦除和装换
        擦除的意思就是 如果将一个list《String》  转换为 List 则该List 对集合元素的类型检查就变成了泛型参数的上限即object
        转换的意思就是 跟擦除的相反， 这个会出现警告，但是不会引起编译和运行的问题

    9.6 泛型和数组
        java中有一条原则：如果一段代码没有提出unchecked 未经检查的转换的警告，在运行时，就不会出现ClassCastException异常


        就不如
            List <String > lsa = new Arraylist <Stirng > [10] 这个是不容许的 违背了原则
            List <String > lsa = new new Arraylist[10]  这个是可以编译，只是存在转换的警告


