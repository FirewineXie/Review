第十四章_基本注解
    如果想要学习spring的话，我觉得注解的理解就非常的重要，
    注解就是代码里的特殊标记，这些标记可以在编译、类加载、运行时被读取，并执行相应的处理

    注解就是想修饰符一样

    14.1 基本注解
        java的5个基本注解：
            @Override
            @Deparecated
            @SuppressWarnings
            @SafeVarargs
            @FunctionallInterface
        14.1.1 限定重写父类的方法：@Override
            用来指定方法覆盖的，他可以强制一个子类覆盖父类的方法，
            这个注解会告诉编译器检查这个方法，保证父类不会有错，
        14.1.2 @Deparecated
            用于表示某个程序元素（类或者方法）过时，当其他程序使用已经过时的类或者方法，编译器就会发生警告，
            有两个属性： {
                forRemoval 指定该api 在将来是否被删除
                since 该String类型的属性指定该api 从age版本被标记为过时
            }
        14.1.3 抑制编译器警告：@SuppresssWarning
            指示该注解修饰的程序元素（以及该程序元素中的所有子元素） 取消显示指定的编译器警告。会一直作用于该程序的所有的子元素

        14.1.4 “堆污染”@SafeVarargs
            当把一个不带泛型的对象赋值给一个带泛型的变量时，往往会发生这中堆污染，
            例如： List<string> ls = list
            List list = new Arraylist<Interger>()


            出现堆污染，有三种的方法可以解决的{
                1.是使用@SafeVarargs
                2、使用@SuppressWarning（“unchecked”）修饰
                3.编译是使用-xlint：varargs 选项
            }

        14.1.5 java8的函数式接口@Functionallnterface
            这个在前面的lambda 表达式的提过，这个就是用于修饰函数式接口的注解， 说明就是为了lambda准备的。
    14.2 JDL 的元注解
        一共提供6个注解，其中5个是修饰其他的注解含义
        一个是重复注解

            14.2.1 使用@Retention
                只能修饰注解定义，用于指定被修饰的注解可以保留多长时间，
                    他的值有三个，如果程序需要的话可以看api
            14.2.2 使用@Target
                也是只能修饰注解定义，指定被修饰的注解能用于修饰那些程序单元

            14.2.3 使用@Documented
                用于指定该元注解修饰的注解类将被javadoc 工具提取成文档，如果定义注解类时，使用了这个修饰，这个在api文档包含这个注解说明

            14.2.4 使用@Inherited
                指定被他修饰的注解将具有注释型
    14.3 自定义注解
        14.3.1 定义注解
            定义新的注解类型使用@interface 关键字，
            public @interface Test{} 这就是一个简单的注解类型
            注解可以用于修饰任何程序元素，包括类，接口方法，等，

        14.3.4 java8 新增的重复注解
            同一个程序元素，最多只能使用一个相同类型的注解，但是如果想要使用相同的注解就必须要使用容器，
            或者使用@results 这个可以让程序使用多个注解

        14.3.5 java8 新增的类型注解
            java8 为枚举增加了两个枚举值，这种注解就是类型注解，类型注解可以用于修饰在任何地方出现的类型
    14.4 编译时处理注解
        APT 是一种注解处理工具，他对源代码文件进行检测，并找出源代码所包含的注解信息，然后针对注解信息进行额外的处理，
        这个存在的主要目的就是为了简化开发者的工作量，因为APT 可以子啊编译过程同时生成一些附属文件，，APT可以代替，传统的对这些个文件的维护工作